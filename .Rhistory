df %>%
select(a, b, c)
df %>%
select(a, b, c) %>%
split(.$a)
df %>%
select(a, b, c) %>%
split(.$a) %>%
map(~ select(., b, c))
df %>%
group_by(a)
df %>%
group_by(a) %>%
nest()
df %>%
group_by(a) %>%
nest() ->aa
aa
aa[1,1]
aa[1,2]
aa[1,2] %>% lobstr::sxp()
aa[1,2] %>% lobstr::tree()
aa[1,2]
?R4eGPS::structDraw_multi_genes
library(devtools)
?R4eGPS::structDraw_multi_genes
document()
?R4eGPS::structDraw_multi_genes
R4eGPS::structDraw_multi_genes(list = list(a=1:10), gHeight = 30)
devtools::load_all(".")
R4eGPS::structDraw_multi_genes(list = list(a=1:10), gHeight = 30)
# 示例数据
data <- tibble::tibble(
`Scientific name` = c("Species A", "Species B", "Species A", "Species C", "Species B"),
`query name` = c("Query 1", "Query 2", "Query 1", "Query 3", "Query 1")
)
# 示例数据
data <- tibble::tibble(
`Scientific name` = c("Species A", "Species B", "Species A", "Species C", "Species B"),
`query name` = c("Query 1", "Query 2", "Query 1", "Query 3", "Query 1")
)
View(data)
# 创建统计表格
summary_table <- data %>%
group_by(`Scientific name`, `query name`) %>%
summarize(count = n()) %>%
pivot_wider(names_from = `query name`, values_from = count, values_fill = 0)
# 输出结果
print(summary_table)
data %>%
group_by(`Scientific name`, `query name`)
data %>%
group_by(`Scientific name`, `query name`) %>%
summarize(count = n() , .groups = `Scientific name`)
data %>%
group_by(`Scientific name`, `query name`) %>%
summarize(count = n() ,)
data %>%
count(`Scientific name`, `query name`)
summary_table <- data %>%
count(`Scientific name`, `query name`) %>%
pivot_wider(names_from = `query name`, values_from = count, values_fill = 0)
# 使用 count() 函数创建统计表格
summary_table <- data %>%
count(`Scientific name`, `query name`) %>%
pivot_wider(names_from = `query name`, values_from = n, values_fill = 0)
summary_table
library(devtools)
document()
J("java.lang.System")$getProperty("java.version")
library(rJava)
J("java.lang.System")$getProperty("java.version")
rJava::.jvmState()
.jclass.void
rJava::.jvmState()
R4eGPS::launchEGPS_withinR()
library(devtools)
use_package('rlang')
file.remove(storage_file_path)
file.remove("1")
a <- file.remove("1")
a
remove.packages('R4eGPS')
storage_file_path <- file.path(Sys.getenv("HOME"), ".R4eGPS.package.vars.rds")
success <- file.remove(storage_file_path)
success
remove.packages('R4eGPS')
R4eGPS::launchEGPS_withinR()
remove.packages('R4eGPS')
Sys.getenv("HOME")
R4eGPS::launchEGPS_withinR()
R4eGPS_persisting_Vars
R4eGPS_persisting_Vars %>% glimpse()
R4eGPS_persisting_Vars %>% str()
R4eGPS_persisting_Vars %>% names()
R4eGPS_persisting_Vars$eGPS_jars_path
R4eGPS_persisting_Vars$eGPS_jars_path <- '1'
tryR::pas_pathPrep_MSWindows()
R4eGPS_persisting_Vars$eGPS_jars_path <- "C:/Users/yudal/Documents/project/eGPS2/eGPS_v2_windows_openJDK8_64bit/eGPS_lib"
setGlobalVars(NULL)
R4eGPS_persisting_Vars
R4eGPS_persisting_Vars %>% sapply(., length)
R4eGPS::launchEGPS_withinR()
a <- R4eGPS::launchEGPS_withinR()
a
a$toString()
a$callTest()
a$launch()
devtools::load_all(".")
setwd("C:\Users\yudal\Documents\project\eGPS2\eGPS_v2_windows_openJDK8_64bit")
tryR::pas_pathPrep_MSWindows()
setwd("C:/Users/yudal/Documents/project/eGPS2/eGPS_v2_windows_openJDK8_64bit")
R4eGPS::launchEGPS_withinR()
.jclassPath()
# .jinit(parameters = c("-Xmx4g","-Duser.dir=C:/Users/yudal/Documents/project/eGPS2/eGPS_v2_windows_openJDK8_64bit"))
.jinit(parameters = c("-Xmx4g","-cp eGPS_lib/*"))
.jinit()
R4eGPS::launchEGPS_withinR()
options("java.parameters")
R4eGPS::launchEGPS_withinR()
a <- R4eGPS::launchEGPS_withinR()
R4eGPS::getGlobalVars()
R4eGPS::getGlobalVars() %>% as.list()
a <- R4eGPS::getGlobalVars() %>% as.list()
a
a$tmpFile <- NULL
a
R4eGPS::setGlobalVars(a)
R4eGPS::getGlobalVars() %>% as.list()
getwd()
devtools::load_all(".")
a <- R4eGPS::launchEGPS_withinR()
getwd()
devtools::load_all(".")
a <- R4eGPS::launchEGPS_withinR()
getwd()
a$callTest("fe")
R4eGPS::getGlobalVars() %>% as.list()
storage_file_path <- file.path(Sys.getenv("HOME"), ".R4eGPS.package.vars.rds")
success <- file.remove(storage_file_path)
R4eGPS::setGlobalVars(list(eGPS_software_path_key="C:/Users/yudal/Documents/project/eGPS2/eGPS_v2_windows_openJDK8_64bit"))
getGlobalVars() %>% as.list()
devtools::load_all(".")
getGlobalVars() %>% as.list()
R4eGPS::setGlobalVars(list(eGPS_software_path_key="C:/Users/yudal/Documents/project/eGPS2/eGPS_v2_windows_openJDK8_64bit"))
getGlobalVars() %>% as.list()
getGlobalVars()[['eGPS_software_path']]
devtools::load_all(".")
getGlobalVars() %>% as.list()
setGlobalVars(list(eGPS_software_path="C:/Users/yudal/Documents/project/eGPS2/eGPS_v2_windows_openJDK8_64bit/eGPS_lib"))
getGlobalVars() %>% as.list()
getGlobalVars()
getGlobalVars() %>% as.list()
getGlobalVars()[['eGPS_software_path']]
file.path(getGlobalVars()[['eGPS_software_path']] ,  'eGPS_lib')
getGlobalVars()[['eGPS_software_path']]
devtools::load_all(".")
R4eGPS::launchEGPS_withinR()
devtools::load_all(".")
R4eGPS::launchEGPS_withinR()
devtools::load_all(".")
R4eGPS::launchEGPS_withinR()
devtools::load_all(".")
R4eGPS::launchEGPS_withinR()
a <- list()
a
a[['fefe']] <- 4
a
devtools::load_all(".")
launchEGPS_withinR()
getwd()
devtools::load_all("~/project/R4eGPS")
launchEGPS_withinR()
devtools::load_all("~/project/R4eGPS")
launchEGPS_withinR()
.jclassPath()
file.path(getGlobalVars()[['eGPS_software_path']] , 'eGPS_lib')
getGlobalVars()[['eGPS_software_path']]
getGlobalVars() %>% as.list()
devtools::load_all("~/project/R4eGPS")
getGlobalVars() %>% as.list()
launchEGPS_withinR()
launchEGPS_withinR("C:/Users/yudal/Documents/project/eGPS2/eGPS_v2_windows_openJDK8_64bit")
getGlobalVars() %>% as.list()
.jgc()
egps <- launchEGPS_withinR()
egps
names(egps)
egps$callTest("Hi this is ydl called from Rstudio")
egps <- launchEGPS_withinR()
egps$callTest("Hi this is ydl called from Rstudio")
getwd()
egps <- launchEGPS_withinR()
devtools::load_all("~/project/R4eGPS")
egps <- launchEGPS_withinR()
getwd()
setwd("C:/Users/yudal/Documents/project/R4eGPS")
egps <- launchEGPS_withinR()
setwd("C:/Users/yudal/Documents/project/R4eGPS")
egps <- launchEGPS_withinR()
getwd()
options(java.parameters = c("-Duser.dir=C:/Users/yudal/Documents/project/eGPS2/eGPS_v2_windows_openJDK8_64bit","-Xmx4g"))
options('java.parameters')
devtools::load_all(".")
egps <- launchEGPS_withinR()
getwd()
devtools::load_all(".")
egps <- launchEGPS_withinR()
devtools::load_all(".")
egps <- launchEGPS_withinR()
devtools::load_all(".")
egps <- launchEGPS_withinR()
devtools::load_all("~/project/R4eGPS")
egps <- launchEGPS_withinR()
setwd("C:/Users/yudal/Documents/project/R4eGPS")
devtools::load_all(".")
egps <- launchEGPS_withinR()
devtools::load_all(".")
egps <- launchEGPS_withinR()
egps <- launchEGPS_withinR(autoSetWD = T)
?launchEGPS_withinR
library(devtools)
document()
setwd("C:/Users/yudal/Documents/project/R4eGPS")
document()
?launchEGPS_withinR
document()
?launchEGPS_withinR
egps <- launchEGPS_withinR(autoSetWD = T)
unlink(temp.out)
expMatrixCol = c("name")
cat1Col = c("name", "cat1")
cat2Col = c("name", "cat2", "value")
ll <- list(expMatrixCol = expMatrixCol,
cat1Col = cat1Col,
cat2Col = cat2Col)
ll
jsonStr <- list2jsonStr(ll)
devtools::load_all(".")
jsonStr <- list2jsonStr(ll)
jsonStr
library(devtools)
document()
?correlationVis_expressionProfile
document()
?correlationVis_expressionProfile
compsLength <- 10
sampleSize <- 8
gNames <- paste0('Gene', 1:compsLength)
simulatedData <- setNames(
as.data.frame(replicate(sampleSize, runif(compsLength, 0, sampleSize))),
paste0('S', 1:sampleSize)
)
expMatrix <- data.frame(name = gNames, simulatedData,
cat1 = rep(c("Cat1","Cat2","Cat3"), each = 3, length.out = compsLength),
cat2 = rep(c("Cat1","Cat2","Cat3"), each = 4, length.out = compsLength),
value = 1)
df <- data.frame(name = gNames, simulatedData,
cat1 = rep(c("Cat1","Cat2","Cat3"), each = 3, length.out = compsLength),
cat2 = rep(c("Cat1","Cat2","Cat3"), each = 4, length.out = compsLength),
value = 1)
df
df %>% sxp()
str(df)
compsLength <- 10
sampleSize <- 8
gNames <- paste0('Gene', 1:compsLength)
simulatedData <- setNames(
as.data.frame(replicate(sampleSize, runif(compsLength, 0, sampleSize))),
paste0('S', 1:sampleSize)
)
df <- data.frame(name = gNames, simulatedData,
cat1 = rep(c("Cat1","Cat2","Cat3"), each = 3, length.out = compsLength),
cat2 = rep(c("Cat1","Cat2","Cat3"), each = 4, length.out = compsLength),
value = 1)
df
devtools::load_all(".")
dfdf
df
devtools::load_all(".")
tryR::pas_pathPrep_MSWindows()
writeDataFrameToTsv(df, file = "C:/Users/yudal/Desktop/temp.txt")
writeDataFrameToTsv(df, path = "C:/Users/yudal/Desktop/temp.txt")
ll
jsonStr <- list2jsonStr(ll)
jsonStr
devtools::load_all(".")
egps <- launchEGPS_withinR(autoSetWD = T)
compsLength <- 10
sampleSize <- 8
gNames <- paste0('Gene', 1:compsLength)
simulatedData <- setNames(
as.data.frame(replicate(sampleSize, runif(compsLength, 0, sampleSize))),
paste0('S', 1:sampleSize)
)
df <- data.frame(name = gNames, simulatedData,
cat1 = rep(c("Cat1","Cat2","Cat3"), each = 3, length.out = compsLength),
cat2 = rep(c("Cat1","Cat2","Cat3"), each = 4, length.out = compsLength),
value = 1)
df
# make sure the column names are matched
correlationVis_expressionProfile(egps, df,expMatrixCol = c("name"),
cat1Col = c("name", "cat1"),
cat2Col = c("name", "cat2", "value"))
devtools::load_all("~/project/R4eGPS")
egps <- launchEGPS_withinR(autoSetWD = T)
compsLength <- 10
sampleSize <- 8
gNames <- paste0('Gene', 1:compsLength)
simulatedData <- setNames(
as.data.frame(replicate(sampleSize, runif(compsLength, 0, sampleSize))),
paste0('S', 1:sampleSize)
)
df <- data.frame(name = gNames, simulatedData,
cat1 = rep(c("Cat1","Cat2","Cat3"), each = 3, length.out = compsLength),
cat2 = rep(c("Cat1","Cat2","Cat3"), each = 4, length.out = compsLength),
value = 1)
# make sure the column names are matched
correlationVis_expressionProfile(egps, df,expMatrixCol = c("name"),
cat1Col = c("name", "cat1"),
cat2Col = c("name", "cat2", "value"))
# make sure the column names are matched
correlationVis_expressionProfile(egps, df,expMatrixCol = c("name"),
cat1Col = c("name", "cat1"),
cat2Col = c("name", "cat2", "value"))
library(R4eGPS)
egps <- launchEGPS_withinR(autoSetWD = T)
compsLength <- 10
sampleSize <- 8
gNames <- paste0('Gene', 1:compsLength)
simulatedData <- setNames(
as.data.frame(replicate(sampleSize, runif(compsLength, 0, sampleSize))),
paste0('S', 1:sampleSize)
)
df <- data.frame(name = gNames, simulatedData,
cat1 = rep(c("Cat1","Cat2","Cat3"), each = 3, length.out = compsLength),
cat2 = rep(c("Cat1","Cat2","Cat3"), each = 4, length.out = compsLength),
value = 1)
# make sure the column names are matched
correlationVis_expressionProfile(egps, df,expMatrixCol = c("name"),
cat1Col = c("name", "cat1"),
cat2Col = c("name", "cat2", "value"))
library(R4eGPS)
egps <- launchEGPS_withinR(autoSetWD = T)
compsLength <- 10
sampleSize <- 8
gNames <- paste0('Gene', 1:compsLength)
simulatedData <- setNames(
as.data.frame(replicate(sampleSize, runif(compsLength, 0, sampleSize))),
paste0('S', 1:sampleSize)
)
df <- data.frame(name = gNames, simulatedData,
cat1 = rep(c("Cat1","Cat2","Cat3"), each = 3, length.out = compsLength),
cat2 = rep(c("Cat1","Cat2","Cat3"), each = 4, length.out = compsLength),
value = 1)
# make sure the column names are matched
correlationVis_expressionProfile(egps, df,expMatrixCol = c("name"),
cat1Col = c("name", "cat1"),
cat2Col = c("name", "cat2", "value"))
# make sure the column names are matched
correlationVis_expressionProfile(egps, df,expMatrixCol = c("name"),
cat1Col = c("name", "cat1"),
cat2Col = c("name", "cat2", "value"))
egps$eheatmap()
egps$eheatmap("fe")
launchEGPS_withinR()
# make sure the column names are matched
correlationVis_expressionProfile(egps, df,expMatrixCol = c("name"),
cat1Col = c("name", "cat1"),
cat2Col = c("name", "cat2", "value"))
library(R4eGPS)
egps <- launchEGPS_withinR(autoSetWD = T)
compsLength <- 10
sampleSize <- 8
gNames <- paste0('Gene', 1:compsLength)
simulatedData <- setNames(
as.data.frame(replicate(sampleSize, runif(compsLength, 0, sampleSize))),
paste0('S', 1:sampleSize)
)
df <- data.frame(name = gNames, simulatedData,
cat1 = rep(c("Cat1","Cat2","Cat3"), each = 3, length.out = compsLength),
cat2 = rep(c("Cat1","Cat2","Cat3"), each = 4, length.out = compsLength),
value = 1)
# make sure the column names are matched
correlationVis_expressionProfile(egps, df,expMatrixCol = c("name"),
cat1Col = c("name", "cat1"),
cat2Col = c("name", "cat2", "value"))
library(R4eGPS)
egps <- launchEGPS_withinR(autoSetWD = T)
compsLength <- 10
sampleSize <- 8
gNames <- paste0('Gene', 1:compsLength)
simulatedData <- setNames(
as.data.frame(replicate(sampleSize, runif(compsLength, 0, sampleSize))),
paste0('S', 1:sampleSize)
)
df <- data.frame(name = gNames, simulatedData,
cat1 = rep(c("Cat1","Cat2","Cat3"), each = 3, length.out = compsLength),
cat2 = rep(c("Cat1","Cat2","Cat3"), each = 4, length.out = compsLength),
value = 1)
# make sure the column names are matched
correlationVis_expressionProfile(egps, df,expMatrixCol = c("name"),
cat1Col = c("name", "cat1"),
cat2Col = c("name", "cat2", "value"))
# make sure the column names are matched
correlationVis_expressionProfile(egps, df,expMatrixCol = c("name"),
cat1Col = c("name", "cat1"),
cat2Col = c("name", "cat2", "value"))
# make sure the column names are matched
correlationVis_expressionProfile(egps, df,expMatrixCol = c("name"),
cat1Col = c("name", "cat1"),
cat2Col = c("name", "cat2", "value"))
egps <- launchEGPS_withinR(autoSetWD = T)
# make sure the column names are matched
correlationVis_expressionProfile(egps, df,expMatrixCol = c("name"),
cat1Col = c("name", "cat1"),
cat2Col = c("name", "cat2", "value"))
R4eGPS::getGlobalVars()
R4eGPS::getGlobalVars() %>% as.list()
R4eGPS::runTest()
##########################
list1 <- list(
gene1 = list(
length = 250,
start = c(1, 10, 101, 200),
end = c(8, 56, 152, 230),
color = c("#E63946", "#457B9D", "#2A9D8F", "#F4A261")
),
gene2 = list(
length = 350,
start = c(1, 180, 210, 261),
end = c(150, 200, 250, 300),
color = c("#E63946", "#457B9D", "#2A9D8F", "#F4A261")
),
gene3 = list(
length = 300,
start = c(51, 101, 200),
end = c(100, 150, 231),
color = c("#2A9D8F", "#F4A261", "#1D3557")
)
list2 <- list(
gene1 = list(
length = 100,
start = 1,
end = 50,
color = c("#E63946")
),
gene3 = list(
length = 300,
start = c(51, 101),
end = c(100, 150),
color = c("#2A9D8F", "#F4A261")
)
R4eGPS::structDraw_multi_genes(list1)
purrr::walk2
?tapplay
?tapply
# 使用 lapply 处理一个列表
my_list <- list(a = 1:5, b = 6:10)
result_lapply <- lapply(my_list, sum)
result_lapply
?replicate()
?split
?aggregate()
aggregate() %>% ftype()
aggregate %>% ftype()
aggregate
aggregate.data.frame
# 原始数据
values <- c(1, 2, 3, 4, 5, 6)
groups <- factor(c('A', 'A', 'B', 'B', 'C', 'C'))
# 使用 split 拆分
split_data <- split(values, groups)
split_data
# 使用 unlist 恢复为一个向量
merged_values <- unlist(split_data)
merged_values
merged_values <- do.call(c, split_data)
merged_values
library(devtools)
document()
??R4eGPS
?R4eGPS::launchEGPS_withinR
egps <- R4eGPS::launchEGPS_withinR("C:/Users/yudal/Documents/project/eGPS2/eGPSv2_forMyselfUsage")
R4eGPS::runTest()
tryR::pas_pathPrep_MSWindows()
##########################
nwk_tree_path <- "C:/Users/yudal/.egps2/config/bioData/example/9_model_species_evolution.nwk"
##########################
nwk_tree_path <- "C:/Users/yudal/.egps2/config/bioData/example/9_model_species_evolution.nwk"
R4eGPS::evoltre_getNodeNames(tree_path = nwk_tree_path, onlyLeaf = T)
##########################
list1 <- list(
gene1 = list(
length = 250,
start = c(1, 10, 101, 200),
end = c(8, 56, 152, 230),
color = c("#E63946", "#457B9D", "#2A9D8F", "#F4A261")
),
gene2 = list(
length = 350,
start = c(1, 180, 210, 261),
end = c(150, 200, 250, 300),
color = c("#E63946", "#457B9D", "#2A9D8F", "#F4A261")
),
gene3 = list(
length = 300,
start = c(51, 101, 200),
end = c(100, 150, 231),
color = c("#2A9D8F", "#F4A261", "#1D3557")
)
R4eGPS::structDraw_multi_genes(list1)
